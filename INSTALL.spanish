Manual de instalación y despliegue
==================================

1. Instalar python 2.5 o posterior, estando sin embargo NO recomendas ni soportadas las versiones 3.0 o superiores. También hace falta instalar python-virtualenv, que es el entorno donde se instalarán el resto de dependencias de forma local al proyecto.

2. Instalar Apache 2.x y mod_python 3.x
    Configurar Apache, añadir al archivo httpd.conf:
        <Location "/mysite/">
             SetHandler python-program
             PythonHandler django.core.handlers.modpython
             SetEnv DJANGO_SETTINGS_MODULE mysite.settings
             PythonOption django.root /mysite
             PythonDebug On
        </Location>
    reemplanzando mysite.settings con la ruta Python hacia el archivo settings.py del proyecto de Django. Si el proyecto no está en el PYTONPATH por defecto del equipo, hay que indicarle a mod_python dónde puede encontrar el proyecto añadiendo:
            PythonPath "['/path/to/project'] + sys.path"

    con la ruta hacia el proyecto, en a la lista anterior.
    Para más detalles, servir archivos media (.css, .jpg,etc) y archivos de administrador: http://docs.djangoproject.com/en/dev/howto/deployment/modpython/#howto-deployment-modpython


3. Instalar gestor de base de datos: MySQL versión mínima: 3.23, mejor 4.1 o 5.0. Usar el tipo de tablas: InnoDB (totalmente soportado por Django).

4. Instalar MySQLdb interface Python para MySQl versión: 1.2.1p2 o posterior.

5. Crear una base de datos con CHARACTER SET utf8, y configurar el local_settings.py para que acceda a ella.

6. Instalar las dependencias del proyecto:
    6.1 Ejecutar ./setup_env.sh en el directorio raíz del proyecto instalará todas las dependencias del proyecto en un subdirectorio (env/) y cargará dicho entorno. Una vez instaladas las dependencias no hay que reinstalarlas más a menos que cambien en el futuro, pero sí hay que cargar el entorno cuando no esté cargado, ejecutando "source ./env/bin/activate".

3. Ejecutar el comando "python manage.py syncdb" para crear las tablas en la base de datos a partir de los modelos. Te permitirá crear un usuario administrador.
4. Ejectuar en el mismo directorio "python manage.py runserver".

Aplicación lanzada. Hay más información de cómo lanzar una aplicación django en el manual de django  http://docs.djangoproject.com/en/dev/howto/deployment/ y también por ejemplo en el siguiente enlace: http://softlibre.barrapunto.com/article.pl?sid=10/11/09/0711228 .

Traducción
==========

El idioma base de la aplicación del banco del tiempo es el español. Si quieres traducirla a otros idiomas, como por ejemplo al inglés, debes primero generar un fichero de traducción vacío para ese idioma y luego mediante una interfaz web añadir las traducciones. Incluso si no te gustan los textos en español que vienen por defecto, puedes crear una traducción a tu versión del español.

En el mundo de las traducciones, todos los idiomas tienen un código de idioma. Por ejemplo el español tiene el código "es", el inglés el código "en", etc. También existe por ejemplo el código "es-es" para el español de España, "es-ar" para el Argentino.. Todas las posibilidades reconocidas están listadas en http://www.i18nguy.com/unicode/language-identifiers.html

Para generar la traducción a un idioma, debes conocer el código de traducción de ese idioma, y luego ejecutar el siguiente comando en el directorio principal de timebank/:

    ./env/bin/django-admin.py makemessages -i "*env*" --locale=<codigo_de_idioma>

Sustituyendo <código_de_idioma> por el código del idioma que quieras traducir. Posteriormente, tienes que reiniciar la aplicación para que django se de cuanta de la existencia de esas nuevas traducciones, y a partir de ahora el resto se hace desde tu navegador web. Entras en la web, y debes autenticarte en la aplicación con tu usuario administrador. Entrar en "Administración" > "Traducciones", escoger el idioma a traducir y la aplicación a traducir (timebank), y comenzar a traducir las cadenas que aparecen en la columna de la izquierda insertando las traducciones en la columna de la derecha, y guardar luego las traducciones.

Se puede configurar el idioma por defecto de la aplicación usando la variable LANGUAGE_CODE en local_settings.py.

